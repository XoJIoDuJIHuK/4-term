1. Что такое Maven? Для чего создан Maven? Как узнать какую версию Maven вы используете?
	Maven - это инструмент автоматизации сборки и система управления зависимостями. 
Он был создан для упрощения и стандартизации процесса сборки проектов на базе Java. 
Maven использует декларативный подход к настройке сборки, где процесс сборки 
описывается в XML-файле, называемом Project Object Model (POM). Вы можете узнать, 
какую версию Maven вы используете, выполнив команду mvn --version в вашем терминале

2. Какая структура каталогов в Maven?
my-project/
|-- pom.xml
`-- src
    |-- main
    |   |-- java
    |   |-- resources
    |   `-- webapp
    `-- test
        |-- java
        `-- resources
	Здесь my-project - это корневой каталог вашего проекта. Тот pom.xml файл расположен в
 корневом каталоге и содержит конфигурацию проекта. Каталог src содержит исходный код 
вашего проекта, при этом основной каталог содержит основной исходный код и ресурсы, а 
тестовый каталог содержит исходный код теста и ресурсы

3. Что такое pom.xml? Какую информацию содержит pom.xml?
	Тот pom.xml файл - это файл объектной модели проекта (POM) для вашего проекта Maven. 
Он содержит информацию о конфигурации вашего проекта, включая его зависимости, плагины 
и процесс сборки. Файл POM определяет структуру вашего проекта, его зависимости и то, 
как он должен быть построен. Он также содержит метаданные о проекте, такие как его 
название, версия и описание

4. Что такое супер POM?
	Super POM - это POM по умолчанию, предоставляемый Maven. Он содержит параметры 
конфигурации по умолчанию для всех проектов Maven и используется в качестве шаблона 
для создания POM проекта. Если в POM проекта не указан конкретный параметр конфигурации,
 Maven будет использовать значение по умолчанию из Super POM

5. Какие элементы необходимы для минимального POM?
<project>
  <groupId>com.example</groupId>
  <artifactId>my-project</artifactId>
  <version>1.0.0</version>
  <name>My Project</name>
</project>

6. Что такое артефакт? Что является полным именем артефакта?
	В Maven артефакт - это упакованный, распространяемый компонент проекта, такой как файл 
JAR, WAR или EAR. Полное имя артефакта состоит из его groupId, artifactId и версии. 
Например, полное имя файла JAR может быть example:my-project:1.0.0. Идентификатор 
группы идентифицирует организацию, создавшую артефакт, идентификатор артефакта 
идентифицирует конкретный артефакт в организации, а версия идентифицирует версию 
артефакта

7. Что такое зависимости в Maven? Что такое транзитивная зависимость в Maven?
	Зависимости в Maven - это внешние библиотеки или модули, которые требуются 
вашему проекту для компиляции, сборки и запуска. Зависимости объявляются в файле POM 
с использованием элемента dependency. Maven использует разрешение зависимостей для 
автоматической загрузки требуемых зависимостей и их переходных зависимостей из 
репозитория и включения их в сборку проекта
	Транзитивная зависимость - это зависимость, которая требуется другой зависимости 
вашего проекта. Например, если ваш проект зависит от зависимости A, а зависимость A 
зависит от зависимости B, то зависимость B является транзитивной зависимостью вашего 
проекта

8. Что такое плагин в Maven?
	Плагин в Maven - это набор целей или задач, которые могут быть выполнены для 
выполнения определенной задачи в процессе сборки. Плагины определяются в файле POM с
помощью элемента plugin. Некоторые примеры плагинов Maven включают плагин compiler для 
компиляции Java-кода, плагин surefire для запуска модульных тестов и плагин deploy для 
развертывания проекта в удаленном репозитории

9. Что такое задача в Maven?
	В Maven задача - это определенное действие, которое выполняется в процессе
 сборки. Каждый плагин определяет одну или несколько задач, которые могут быть 
выполнены. Например, плагин compiler определяет задачу compile, которая компилирует 
исходный код, а плагин jar определяет задачу jar, которая создает JAR-файл проекта

10.Что такое репозиторий в Maven? Какие типы репозитория существуют в Maven?
	Репозиторий в Maven - это место, где Maven может находить и загружать 
зависимости и плагины. В Maven существует два типа репозиториев: локальные репозитории 
и удаленные репозитории. Локальный репозиторий - это каталог на компьютере 
разработчика, где Maven хранит загруженные зависимости и плагины. Удаленные репозитории
 размещаются на сервере, и к ним можно получить доступ через Интернет.

11.Какой порядок поиска зависимостей Maven?
	Порядок поиска зависимостей Maven следующий:
Выполните поиск запрошенной зависимости в локальном репозитории.
  -Если зависимость не найдена в локальном репозитории, выполните поиск в удаленных 
	репозиториях в том порядке, в котором они перечислены в файле POM.
  -Если зависимость по-прежнему не найдена, выполните поиск в репозиториях родительского 
	проекта (если у текущего проекта есть родительский).
  -Если зависимость по-прежнему не найдена, выполните поиск в глобальных репозиториях, 
	настроенных в файле настроек Maven

12.Назовите основные фазы жизненного цикла сборки Maven?
	Основными этапами жизненного цикла сборки Maven являются:
validate: проверяет структуру проекта и зависимости.
compile: компилирует исходный код.
test: запускает тесты.
package: упаковывает скомпилированный код в исполняемый формат, такой как JAR или WAR-
файл.
verify: выполняет проверку упакованного кода, чтобы убедиться в его достоверности.
install: устанавливает упакованный код в локальный репозиторий.
deploy: развертывает упакованный код в удаленном репозитории

13.Что делает команда mvn site? Что делает команда mvn clean?
	Команда mvn site создает веб-сайт для проекта Maven, который включает проектную 
документацию, отчеты и другую полезную информацию. Этот веб-сайт может быть опубликован
 на веб-сервере для легкого доступа разработчиков и пользователей.
	Команда mvn clean удаляет все файлы, сгенерированные предыдущей сборкой проекта,
 включая скомпилированный код, результаты тестирования и любые другие файлы, 
сгенерированные в процессе сборки

14.Из каких фаз состоит жизненный цикл сборки Default (Build)?
 См. 12

15.Какие типы плагинов существуют в Maven?
► создания jar – файла
► создания war – файла
► компиляции кода файлов
► юнит-тестирования кода
► создание отчётов проекта
► создание документации проекта

16.Когда Maven использует внешние зависимости?
	Maven использует внешние зависимости, когда проекту требуются дополнительные 
библиотеки или модули, которые не включены в кодовую базу проекта. Эти внешние 
зависимости объявляются в POM-файле проекта с помощью элемента <dependencies>.

17.Какая команда создает новый проект на основе архетипа?
mvn archetype:generate, далее нужно будет указать group id, artifact id и
	arhcetype id

18.Перечислите теги pom.xml.
<project>: the root element of the POM file.
<modelVersion>: specifies the version of the Maven model that the POM file uses.
<groupId>: specifies the group or organization that the project belongs to.
<artifactId>: specifies the name of the project.
<version>: specifies the version of the project.
<dependencies>: lists the dependencies that the project requires.
<build>: specifies the configuration for the build process.
<plugins>: lists the plugins that are used during the build process.
<repositories>: specifies the repositories where external dependencies can be found.
<profiles>: allows for the specification of different build profiles based on different environments or scenarios.